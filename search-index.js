var searchIndex = JSON.parse('{\
"magic":{"doc":"About","t":[18,18,18,18,18,3,3,18,18,18,18,3,13,13,13,18,18,18,4,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["APPLE","CHECK","COMPRESS","COMPRESS_TRANSP","CONTINUE","Cookie","CookieFlags","DEBUG","DEVICES","ERROR","EXTENSION","FfiError","InvalidDatabaseFilePath","Libmagic","LibmagicFlagUnsupported","MIME","MIME_ENCODING","MIME_TYPE","MagicError","NODESC","NO_CHECK_APPTYPE","NO_CHECK_BUILTIN","NO_CHECK_CDF","NO_CHECK_COMPRESS","NO_CHECK_CSV","NO_CHECK_ELF","NO_CHECK_ENCODING","NO_CHECK_JSON","NO_CHECK_SOFT","NO_CHECK_TAR","NO_CHECK_TEXT","NO_CHECK_TOKENS","PRESERVE_ATIME","RAW","SYMLINK","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","check","clone","clone_into","cmp","compile","complement","contains","default","difference","drop","empty","eq","extend","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","libmagic_version","list","load","load_buffers","ne","not","open","partial_cmp","remove","set","set_flags","source","source","sub","sub_assign","symmetric_difference","to_owned","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","0","0"],"q":["magic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","magic::MagicError",""],"d":["Return the Apple creator and type","Check the magic database for consistency and print …","If the file is compressed, unpack it and look at the …","Don’t report on compression, only report about the …","Return all matches, not just the first","Configuration of which <code>CookieFlags</code> and magic databases to …","Bitmask flags that specify how <code>Cookie</code> functions should …","Print debugging messages to <code>stderr</code>","If the file is a block or character special device, then …","Treat operating system errors while trying to open files …","Return a slash-separated list of extensions for this file …","FFI error while calling <code>libmagic</code>","","","","A shorthand for <code>MIME_TYPE | MIME_ENCODING</code>","Return a MIME encoding, instead of a textual description","Return a MIME type string, instead of a textual description","The error type used in this crate","A shorthand for <code>EXTENSION | MIME | APPLE</code>","Check for EMX application type (only on EMX)","No built-in tests; only consult the magic file","Don’t get extra information on MS Composite Document …","Don’t look inside compressed files","Don’t examine CSV files","Don’t print ELF details","Don’t check text encodings","Don’t examine JSON files","Don’t consult magic files","Don’t examine tar files","Don’t check for various types of text files","Don’t look for known tokens inside ascii files","On systems that support <code>utime(2)</code> or <code>utimes(2)</code>, attempt to …","Don’t translate unprintable characters to a <code>\\\\\\\\ooo</code> octal …","If the file queried is a symlink, follow it","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns a textual description of the contents of the <code>buffer</code>","Check the validity of entries in the database <code>filenames</code>","","","","Compiles the given database <code>filenames</code> for faster access","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Closes the magic database and deallocates any resources …","Returns an empty set of flags.","","","Returns a textual description of the contents of the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the version of the <code>libmagic</code> C library as reported …","Dumps all magic entries in the given database <code>filenames</code> in …","Loads the given database <code>filenames</code> for further queries","Loads the given compiled databases for further queries","","Returns the complement of this set of flags.","Creates a new configuration, <code>flags</code> specify how other …","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Sets the flags to use","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","",""],"i":[1,1,1,1,1,0,0,1,1,1,1,0,2,2,2,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,2,4,1,3,2,4,4,4,1,1,1,4,1,1,1,1,4,1,1,1,4,1,1,1,1,1,3,3,2,2,4,1,3,2,2,4,1,1,1,1,1,1,1,1,1,3,2,4,1,1,0,4,4,4,1,1,4,1,1,1,4,3,2,1,1,1,1,3,2,1,1,3,2,4,1,3,2,4,1,3,2,4,1,5,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]]],[[["cookieflags",3]],["c_int",6]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["cookie",3]],["result",4,[["string",3],["magicerror",4]]]],[[["cookie",3]],["result",4,[["magicerror",4]]]],[[["cookieflags",3]],["cookieflags",3]],[[["",0],["",0]]],[[["cookieflags",3],["cookieflags",3]],["ordering",4]],[[["cookie",3]],["result",4,[["magicerror",4]]]],[[["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]],["bool",0]],[[],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["cookie",3]]],[[],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]],["bool",0]],[[["cookieflags",3],["intoiterator",8]]],[[["cookie",3],["asref",8,[["path",3]]]],["result",4,[["string",3],["magicerror",4]]]],[[["cookieflags",3],["formatter",3]],["result",6]],[[["cookieflags",3],["formatter",3]],["result",6]],[[["cookieflags",3],["formatter",3]],["result",6]],[[["cookieflags",3],["formatter",3]],["result",6]],[[["cookieflags",3],["formatter",3]],["result",6]],[[["ffierror",3],["formatter",3]],["result",6]],[[["ffierror",3],["formatter",3]],["result",6]],[[["magicerror",4],["formatter",3]],["result",6]],[[["magicerror",4],["formatter",3]],["result",6]],[[["cookie",3],["formatter",3]],["result",6]],[[]],[[]],[[["ffierror",3]],["magicerror",4]],[[]],[[]],[[["c_int",6]],["option",4,[["cookieflags",3]]]],[[["c_int",6]],["cookieflags",3]],[[["c_int",6]],["cookieflags",3]],[[["intoiterator",8]],["cookieflags",3]],[[["cookieflags",3],["",0]]],[[["cookieflags",3],["cookieflags",3]]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]],["bool",0]],[[]],[[]],[[]],[[]],[[["cookieflags",3]],["bool",0]],[[["cookieflags",3]],["bool",0]],[[],["c_int",6]],[[["cookie",3]],["result",4,[["magicerror",4]]]],[[["cookie",3]],["result",4,[["magicerror",4]]]],[[["cookie",3]],["result",4,[["magicerror",4]]]],[[["cookieflags",3],["cookieflags",3]],["bool",0]],[[["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3]],["result",4,[["cookie",3],["magicerror",4]]]],[[["cookieflags",3],["cookieflags",3]],["option",4,[["ordering",4]]]],[[["cookieflags",3],["cookieflags",3]]],[[["cookieflags",3],["cookieflags",3],["bool",0]]],[[["cookie",3],["cookieflags",3]],["result",4,[["magicerror",4]]]],[[["ffierror",3]],["option",4,[["error",8]]]],[[["magicerror",4]],["option",4,[["error",8]]]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["cookieflags",3],["cookieflags",3]]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["cookieflags",3],["cookieflags",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["cookieflags",3],["cookieflags",3]],["cookieflags",3]],null,null],"p":[[3,"CookieFlags"],[4,"MagicError"],[3,"FfiError"],[3,"Cookie"],[13,"Libmagic"],[13,"LibmagicFlagUnsupported"]],"a":{"magic_apple":[0],"magic_buffer":[51],"magic_check":[1,52],"magic_close":[61],"magic_compile":[56],"magic_compress":[2],"magic_compress_transp":[3],"magic_continue":[4],"magic_debug":[7],"magic_devices":[8],"magic_error":[9],"magic_extension":[10],"magic_file":[65],"magic_list":[96],"magic_load":[97],"magic_load_buffers":[98],"magic_mime":[15],"magic_mime_encoding":[16],"magic_mime_type":[17],"magic_no_check_apptype":[20],"magic_no_check_builtin":[21],"magic_no_check_cdf":[22],"magic_no_check_compress":[23],"magic_no_check_csv":[24],"magic_no_check_elf":[25],"magic_no_check_encoding":[26],"magic_no_check_json":[27],"magic_no_check_soft":[28],"magic_no_check_tar":[29],"magic_no_check_text":[30],"magic_no_check_tokens":[31],"magic_nodesc":[19],"magic_open":[101],"magic_preserve_atime":[32],"magic_raw":[33],"magic_set":[5],"magic_setflags":[105],"magic_symlink":[34],"magic_t":[5],"magic_version":[95]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
